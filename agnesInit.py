# -*- coding: utf-8 -*-
"""
Created on Mon Dec 07 08:29:58 2015

@author: Agnes
"""

from gurobipy import * 
import objectivefunctions as objf

w = {
('1', '2'): 1,
('1', '3'): 0,
('1', '4'): 0,
('1', '5'): 1,
('1', '6'): 1,
('1', '7'): 1,
('1', '8'): 0,
('1', '9'): 0,
('1', '10'): 0,
('1', '11'): 0,
('1', '12'): 0,
('1', '13'): 0,
('1', '14'): 0,
('1', '15'): 0,
('1', '16'): 0,
('1', '17'): 0,
('1', '18'): 0,
('1', '19'): 0,
('1', '20'): 0,
('1', '21'): 0,
('1', '22'): 0,
('2', '3'): 1,
('2', '4'): 0,
('2', '5'): 1,
('2', '6'): 1,
('2', '7'): 1,
('2', '8'): 0,
('2', '9'): 0,
('2', '10'): 0,
('2', '11'): 0,
('2', '12'): 0,
('2', '13'): 0,
('2', '14'): 0,
('2', '15'): 0,
('2', '16'): 0,
('2', '17'): 0,
('2', '18'): 0,
('2', '19'): 0,
('2', '20'): 0,
('2', '21'): 0,
('2', '22'): 0,
('3', '4'): 1,
('3', '5'): 0,
('3', '6'): 1,
('3', '7'): 0,
('3', '8'): 1,
('3', '9'): 1,
('3', '10'): 0,
('3', '11'): 0,
('3', '12'): 0,
('3', '13'): 0,
('3', '14'): 0,
('3', '15'): 0,
('3', '16'): 0,
('3', '17'): 0,
('3', '18'): 0,
('3', '19'): 0,
('3', '20'): 0,
('3', '21'): 0,
('3', '22'): 0,
('4', '5'): 0,
('4', '6'): 0,
('4', '7'): 0,
('4', '8'): 0,
('4', '9'): 1,
('4', '10'): 0,
('4', '11'): 0,
('4', '12'): 0,
('4', '13'): 0,
('4', '14'): 1,
('4', '15'): 1,
('4', '16'): 0,
('4', '17'): 0,
('4', '18'): 0,
('4', '19'): 0,
('4', '20'): 0,
('4', '21'): 0,
('4', '22'): 0,
('5', '6'): 1,
('5', '7'): 0,
('5', '8'): 0,
('5', '9'): 0,
('5', '10'): 1,
('5', '11'): 1,
('5', '12'): 0,
('5', '13'): 0,
('5', '14'): 0,
('5', '15'): 0,
('5', '16'): 0,
('5', '17'): 0,
('5', '18'): 0,
('5', '19'): 0,
('5', '20'): 0,
('5', '21'): 0,
('5', '22'): 0,
('6', '7'): 1,
('6', '8'): 0,
('6', '9'): 0,
('6', '10'): 0,
('6', '11'): 1,
('6', '12'): 1,
('6', '13'): 0,
('6', '14'): 0,
('6', '15'): 0,
('6', '16'): 0,
('6', '17'): 0,
('6', '18'): 0,
('6', '19'): 0,
('6', '20'): 0,
('6', '21'): 0,
('6', '22'): 0,
('7', '8'): 1,
('7', '9'): 0,
('7', '10'): 0,
('7', '11'): 1,
('7', '12'): 1,
('7', '13'): 1,
('7', '14'): 0,
('7', '15'): 0,
('7', '16'): 0,
('7', '17'): 1,
('7', '18'): 0,
('7', '19'): 0,
('7', '20'): 0,
('7', '21'): 0,
('7', '22'): 0,
('8', '9'): 1,
('8', '10'): 0,
('8', '11'): 0,
('8', '12'): 0,
('8', '13'): 1,
('8', '14'): 1,
('8', '15'): 0,
('8', '16'): 0,
('8', '17'): 0,
('8', '18'): 0,
('8', '19'): 0,
('8', '20'): 0,
('8', '21'): 0,
('8', '22'): 0,
('9', '10'): 0,
('9', '11'): 0,
('9', '12'): 0,
('9', '13'): 0,
('9', '14'): 1,
('9', '15'): 1,
('9', '16'): 0,
('9', '17'): 0,
('9', '18'): 0,
('9', '19'): 0,
('9', '20'): 0,
('9', '21'): 0,
('9', '22'): 0,
('10', '11'): 1,
('10', '12'): 0,
('10', '13'): 0,
('10', '14'): 0,
('10', '15'): 0,
('10', '16'): 1,
('10', '17'): 1,
('10', '18'): 0,
('10', '19'): 0,
('10', '20'): 0,
('10', '21'): 0,
('10', '22'): 0,
('11', '12'): 1,
('11', '13'): 0,
('11', '14'): 0,
('11', '15'): 0,
('11', '16'): 1,
('11', '17'): 1,
('11', '18'): 0,
('11', '19'): 0,
('11', '20'): 0,
('11', '21'): 0,
('11', '22'): 0,
('12', '13'): 0,
('12', '14'): 0,
('12', '15'): 0,
('12', '16'): 0,
('12', '17'): 1,
('12', '18'): 1,
('12', '19'): 0,
('12', '20'): 0,
('12', '21'): 0,
('12', '22'): 0,
('13', '14'): 1,
('13', '15'): 0,
('13', '16'): 0,
('13', '17'): 0,
('13', '18'): 1,
('13', '19'): 1,
('13', '20'): 0,
('13', '21'): 0,
('13', '22'): 0,
('14', '15'): 1,
('14', '16'): 0,
('14', '17'): 0,
('14', '18'): 0,
('14', '19'): 1,
('14', '20'): 1,
('14', '21'): 0,
('14', '22'): 0,
('15', '16'): 0,
('15', '17'): 0,
('15', '18'): 0,
('15', '19'): 1,
('15', '20'): 1,
('15', '21'): 0,
('15', '22'): 0,
('16', '17'): 1,
('16', '18'): 0,
('16', '19'): 0,
('16', '20'): 0,
('16', '21'): 0,
('16', '22'): 0,
('17', '18'): 0,
('17', '19'): 0,
('17', '20'): 0,
('17', '21'): 0,
('17', '22'): 0,
('18', '19'): 1,
('18', '20'): 0,
('18', '21'): 1,
('18', '22'): 1,
('19', '20'): 1,
('19', '21'): 1,
('19', '22'): 1,
('20', '21'): 0,
('20', '22'): 1,
('21', '22'): 1 }

model = Model()
n = 22
K = 2
y = {}

f =  open("/Users/valeriedaras/Documents/INSA/5IL/DataMining/workspace/GraphPartitioning/Exemple.txt")
lines = f.readlines()
n = int(lines[0].split(' ')[0])
print n

for i in range(1, n):
    for j in range(i+1, n+1):
        w[str(i), str(j)] = 0

for i in range(1, n+1):
    for neighbor in lines[i].split(' '):
        if(neighbor != ''):
            w[str(i), neighbor.replace('\n', '')] = 1
        
a = 0
for i in range(1, n):
    for j in range (i+1, n+1):
        if(w[str(i), str(j)] == 1):
            a += 1
            
print a
print w


copyFilename = "/Users/valeriedaras/Documents/INSA/5IL/DataMining/workspace/GraphPartitioning/unitEx.graph"
graph = s.createGraph(copyFilename)
cij = [[0 for x in range (n)] for x in range (n)]
for i in range (n):
    for j in range (i+1, n):
        cij[i][j] = objf.calculateWeight(i+1,j+1,graph)


for i in range(1, n):
    for j in range(i+1, n+1):
        #y[i, j] = model.addVar(obj=-w[str(i), str(j)], vtype = GRB.BINARY, name='y_' + str(i) + str(j))
        y[i, j] = model.addVar(obj=-cij[i-1][j-1], vtype = GRB.BINARY, name='y_' + str(i) + str(j))
        y[j, i] = y[i, j]

x = {}        
for i in range(1, n+1):
    x[i] = model.addVar(obj=0, vtype = GRB.BINARY, name='x_' + str(i))
    
model.update()

for i in range(1, n+1):
    for j in range(1, n+1):
        if(j != i):
            for k in range(1, n+1): 
                if(k != j and k != i):
                    L1a = LinExpr([1, 1], [y[i, j], y[i, k]])
                    L1a.addConstant(-1)
                    L1b = LinExpr([1], [y[j, k]])
                    model.addConstr(L1a, "<", L1b) 
    

for i in range(1, n+1):
    L2 = LinExpr(x[i] + quicksum(y[i, j] for j in range(1, i)))
    model.addConstr(L2, ">", 1)
    
    for j in range(1, i):
        L3 = LinExpr(x[i] + y[i, j])
        model.addConstr(L3, "<", 1)
     
    #Constraint : 1 partition doit contenir au moins 2 éléments
    #L4 = LinExpr(quicksum(y[i, j] for j in range(1, i) + range(i+1, n+1)))
    #model.addConstr(L4, ">", 1)
    

model.addConstr(quicksum(x[i] for i in range(1, n+1)) == K)

model.ModelSense = 1
model.optimize()

if model.status == GRB.OPTIMAL:
    print 'Opt. Value =', model.ObjVal
    print x
    print y[20,22]
    

for i in range(1,n+1):
    if model.getVarByName("x_"+str(i)).getAttr('X') == 1:
        print "Partiton avec representant",i,":"
        for j in range(i+1,n+1):
            if model.getVarByName("y_"+str(i)+str(j)).getAttr('X') == 1:
            #if Y[i,j] == 1:
                print j
